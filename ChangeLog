 * Experimental client hello C callback implemented in local crustls version.
 * SNI host selection implemented. Foundation in place for vhost specific TLS settings.
   Missing: ALPN handling, selection from several certificates for a vhost, adding
   of dynamic certificates.
 * Extending our Test CA to create also Elliptic Curve keys for ECDSA certificates.
 * Mixing old-skool OpenSSL PEM format for RSA and newer PKCS8 PEM for EC keys
   to have variety on what rustls is able to parse.
 * Using python module "trustme" to generate certificates from a local CA. Using
   the CA to verify TLS connections in curl and get rid of the "--insecure" setting
   that disables several other checks as well.
 * New directive `TLSProtocol` to set the minimum version of the TLS protocol to
   use on a host/the server. Does not have an effect as the support in crustls
   is not there yet.
 * Adjusting filter buffer sizes for TLS and plain data to allow generation of
   max-length TLS messages without for security and efficiency reasons.
 * Testing SNI invalid name. Proper shutdown of the connection on failures
   during handshake implemented.
 * First checks on connection sharing.
   - requests against a virtual hosts server are only allowed if the client uses SNI.
   - requests to domain B on a connection to domain A are only allowed if there
     are no relevant differences between the TLS configurations. This does exclude
     the certificates configured, since it is the client's repsonsibility to check
     if B falls under the certificate from A.
 * New directive `TLSHonorClientOrder on|off` with default off, to make the
   server session honor client cipher ordering.
 * Checks on SNI selected host against request selected host started.
 * vhost is detected based on client supplied SNI hostname. Unknown SNI hostnames
   are not prevented from connecting as it is the clients obligation if it trust
   the supplied server certificate.
 * base filter handling performs retrieval of JSON resource file. test_03_get succeeds.
 * mod_tls does first successful handshake with a MacOS curl (libressl) using
   TLS v1.2 and an RSA 2048 certificate, self signed.
 * mod_tls loads single certificate (first configured) into rustls
 * test case creates self-signed certificate, configures it for mod_tls
 * created skeleton module and autoconf/make files.