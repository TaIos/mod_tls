 * Added test case for timeout handling during TLS handshake.
 * new config Directive `TLSOptions` similar for mod_ssl's `SSLOptions`.
   Only open so far is 'StdEnvVars' which adds a (currently limited) list
   of TLS related environment variables to CGI handlers.
 * `TLSCertificate` can also be used with a single argument, given one file
   that contains all PEM data.
 * Configuration directives 'TLSProtocols' and 'TLSCiphers' implemented. Test
   cases added.
 * Added support for setting challenge certificates using the new (apache trunk)
   hooks and functions. ACME tls-alpn-01 support incoming.
 * The module now also allows certificate configuration via the new central
   hookes. A future mod_md will provide ACME certificate this way.
 * Updated patch file for the Apache httpd 2.4.x release line with the latest
   necessary changes to run the module.
 * Fixes in output handling to pass meta buckets in their proper location down
   to the network.
 * Test can be run with another mpm by setting the environment variable MPM:
   > MPM=worker pytest
 * All buffers passed to rustls for writing to are now initialized via 'calloc()',
   as Rust requires. There is no concept of a write-only array, unfortunately.
 * Added a patch file for the Apache httpd 2.4.x release line with the - so far -
   necessary changes to the server. Make mod_tls compile against httpd trunk and
   a patched branches/2.4.x.
 * More load test scenarios.
 * Adding the first load test scenario for compaing transfer speeds between mod_tls
   and mod_ssl on a single connection for various resource sizes. Use `make loadtest`
   to run.
 * Fixed a bug that caused the connection to close after the first request had been
   handled.
 * Improved the passing of encrytped data to the network to involve a bit less buffering.
 * Started load test scenarios to measure performance and resource usage.
 * ALPN negotiation implemented. Curl in test cases now speaks HTTP/2 with mod_tls
   when configured.
 * Use of the new Apache httpd API for SSL related queries (available only in trunk
   for now). Other modules can query if the connection is protected by SSL encryption
   as if mod_ssl were loaded. Also, some first SSL related variables are exposed for
   querying.
 * rustls_cipher_certified_keys are used when configuring sessions, so that more
   than one certificate can be configured for a server. The rustls session will
   select the first certificate that is compatible with the clients hello
   settings.
 * Experimental client hello C callback implemented in local crustls version.
 * SNI host selection implemented. Foundation in place for vhost specific TLS settings.
   Missing: ALPN handling, selection from several certificates for a vhost, adding
   of dynamic certificates.
 * Extending our Test CA to create also Elliptic Curve keys for ECDSA certificates.
 * Mixing old-skool OpenSSL PEM format for RSA and newer PKCS8 PEM for EC keys
   to have variety on what rustls is able to parse.
 * Using python module "trustme" to generate certificates from a local CA. Using
   the CA to verify TLS connections in curl and get rid of the "--insecure" setting
   that disables several other checks as well.
 * New directive `TLSProtocol` to set the minimum version of the TLS protocol to
   use on a host/the server. Does not have an effect as the support in crustls
   is not there yet.
 * Adjusting filter buffer sizes for TLS and plain data to allow generation of
   max-length TLS messages without for security and efficiency reasons.
 * Testing SNI invalid name. Proper shutdown of the connection on failures
   during handshake implemented.
 * First checks on connection sharing.
   - requests against a virtual hosts server are only allowed if the client uses SNI.
   - requests to domain B on a connection to domain A are only allowed if there
     are no relevant differences between the TLS configurations. This does exclude
     the certificates configured, since it is the client's repsonsibility to check
     if B falls under the certificate from A.
 * New directive `TLSHonorClientOrder on|off` with default off, to make the
   server session honor client cipher ordering.
 * Checks on SNI selected host against request selected host started.
 * vhost is detected based on client supplied SNI hostname. Unknown SNI hostnames
   are not prevented from connecting as it is the clients obligation if it trust
   the supplied server certificate.
 * base filter handling performs retrieval of JSON resource file. test_03_get succeeds.
 * mod_tls does first successful handshake with a MacOS curl (libressl) using
   TLS v1.2 and an RSA 2048 certificate, self signed.
 * mod_tls loads single certificate (first configured) into rustls
 * test case creates self-signed certificate, configures it for mod_tls
 * created skeleton module and autoconf/make files.